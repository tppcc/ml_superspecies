#! /usr/bin/env python

if __name__ == '__main__':

    # modules
    import sys
    import optparse
    import logging
    import traceback
    
    # tools:
    import rc
    
    # extract arguments from sys.argv array:
    #   0 = name of calling script, 1: = actual arguments
    args = sys.argv[1:]
    
    # set text for 'usage' help line:
    usage = "\n    %prog <rcfile> <key> [-b|--bool] [--default<=value>]\n    %prog <rcfile> -w|--write\n    %prog -h|--help\n    %prog -d|--doc"

    # initialise the option parser:
    parser = optparse.OptionParser(usage=usage)
    
    # define options:
    parser.add_option( "-d", "--doc", 
                         help="print documentation",
                         dest="doc", action="store_true", default=False )
    parser.add_option( "-v", "--verbose", 
                         help="print information messages",
                         dest="verbose", action="store_true", default=False )
    parser.add_option( "-b", "--bool", 
                         help="return 'True' for values 'T', 'True', 'yes', or '1', and 'False' for 'F', 'False', 'no', or '0'",
                         dest="boolean", action="store_true", default=False )
    parser.add_option( "--default", 
                         help="default value returned if key is not found",
                         dest="default", action="store" )
    parser.add_option( "-w", "--write", 
                         help="write pre-processed rcfile",
                         dest="write", action="store_true", default=False )
    
    # now parse the actual arguments:
    opts,args = parser.parse_args( args=args )
    
    # print documentation ?
    if opts.doc :
        print """
Name:
    rcget - script to read a rcfile value
"""
        print parser.print_help()
        print """
Description:
    The <rcfile> is read and the value defined by <key> is printed
    to the standard output.

    This script provides access to the python module 'rc.py' .
    Below the documentation of the module.

------------------------------------------------------------------------
"""
        print rc.__doc__
        sys.exit(0)
    #endif
    
    # recfile argument should be provided:
    if len(args) < 1 :
        parser.error("no name of rcfile provided\n")
    #endif
    # extract:
    rcfile = args[0]
    
    # read rcfile in dictionary:
    try :
        rcf = rc.RcFile( rcfile, silent=(not opts.verbose) )
    except :
        if opts.verbose : logging.error( traceback.format_exc() )
        sys.exit(1)
    #endtry
    
    # print pre-processed file ?
    if opts.write :
        for line in rcf.getlines() : print line.strip()
        sys.exit(0)
    #endif

    # key argument should be provided:
    if len(args) < 2 :
        parser.error("no name of rckey provided\n")
    #endif
    # extract:
    rckey  = args[1]
    
    # key present ?
    if rcf.has_key(rckey) :

        # print requested value:
        if opts.boolean :
            # extract value:
            flag = rcf.get(rckey,'bool')
            # print result:
            if flag :
                print 'True'
            else :
                print 'False'
            #endif
        else :
            # extract value:
            value = rcf.get(rckey)
            # display:
            print value
        #endif
        
    else :

        # default value provided ?
        if opts.default != None :
            # display:
            print opts.default
        else :
            print 'ERROR - key "%s" not found in rcfile "%s" and no default specified' % (rckey,rcfile)
            sys.exit(1)
        #endif

    #endif  # key found
    
#endif  # __main__
