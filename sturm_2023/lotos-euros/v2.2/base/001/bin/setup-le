#! /usr/bin/env python

"""
LOTOS-EUROS job chain starter.
"""


#-------------------------------------------------
# modules
#-------------------------------------------------

# modules:
import sys
import os
import logging

# location of modules:
pypath = []
pypath.append( os.path.join('base','001','py') )

# extend path with local directories:
sys.path = pypath+sys.path

# tools:
import utopya


#----------------------------------------------------
# environment
#----------------------------------------------------

# define variable used to (re)create build directory;
# should exist before rcfile is read and expanded:
os.environ['NEW_BUILD'] = 'None'


#-------------------------------------------------
# begin
#-------------------------------------------------

# init script:
utos = utopya.UtopyaRunScriptRc()

# setup default command line arguments:
utos.ArgumentsSetup( description='LOTOS-EUROS setup',
                        rcbase='jobtree' )

# extra:
utos.ArgumentsAdd( '-n', '--new', help='create new build directory',
                     action='store_true', dest='new' )

# evaluate known arguments, store the other ;
# might show help text and exit:
args,xargs = utos.ArgumentsParse()

# get logger object to shout something:
logger = utos.LoggerGet()

# start, shout info:
logger.info( '' )
logger.info( '** LOTOS-EUROS job chain starter **' )
logger.info( '' )

# show arguments:
logger.info( 'arguments :' )
logger.info( '  rcfile           : %s' % args.rcfile )
logger.info( '  rcbase           : %s' % args.rcbase )
if len(xargs) > 0 :
    logger.error( 'unsupported arguments:' )
    for value in xargs : logger.error( '  %s' % value )
    sys.exit(1)
#endif

## show logging info:
#utos.LoggerTest()
#logger.info( '' )

# setup environment:
os.environ['NEW_BUILD'] = str(args.new)

# application name, rcfile settings start with "<rcbase>.<name>":
name = 'le'
        
# import class as defined by '<name>' in settings;
# should be (derived from) 'utopya.JobStep' :
jbs_cls = utos.ImportClass( name+'.class' )

# init job step (or job tree) object:
jbs = jbs_cls( name, args.rcfile, rcbase=args.rcbase )
# start:
jbs.Start()

# info:
logger.info( '' )
logger.info( '** end **' )
logger.info( '' )


#-------------------------------------------------
# end
#-------------------------------------------------
